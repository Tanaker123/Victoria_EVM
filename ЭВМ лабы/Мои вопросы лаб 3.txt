Можно ли хранить вещественные числа в регистрах общего назначения? +
Да, можно, но это неэффективно.
Регистры общего назначения предназначены для хранения целых чисел и адресов.
Вещественные числа (числа с плавающей точкой) имеют другой формат представления и требуют специальных команд для выполнения арифметических операций.
Сопроцессор (FPU) содержит специализированные регистры для хранения и обработки вещественных чисел, что позволяет достичь более высокой производительности.

Для чего нужен "сопроцессор" в архитектуре x86? +
Сопроцессор (FPU) предназначен для выполнения операций с вещественными числами (числами с плавающей точкой).
Он содержит специализированные регистры (регистры с плавающей точкой) и команды для работы с ними.
Сопроцессор позволяет достичь более высокой производительности при выполнении вычислений с вещественными числами по сравнению с использованием GPR(регистр общего назначения).
 
Как связаны регистры сопроцессора со стеком? +
Регистры сопроцессора организованы в виде стека.
Вершина стека - это регистр ST(0), следующий за ним - ST(1) и т.д.
Команды сопроцессора работают с вершиной стека (ST(0)) и могут изменять его содержимое, перемещать данные между регистрами стека или загружать/выгружать данные из памяти.

Почему вырос объём доступной оперативной памяти при переходе на x86_64? 
Увеличение разрядности адреса позволяет процессору работать с большими объемами данных и повышает производительность приложения.
Объём доступной оперативной памяти вырос при переходе на x86_64, потому что 64-разрядные процессоры могут работать с практически неограниченным объёмом ОЗУ. 
В то время как 32-битные системы ограничены 4 Гб памяти, x64 без проблем использует весь предоставленный объём.

Что такое "адрес возврата функции"? +
Адрес возврата функции - это адрес команды, на которую процессор должен перейти после завершения выполнения функции.
При вызове функции адрес возврата сохраняется в стеке (или в другом месте, в зависимости от соглашения о вызовах).
После завершения функции процессор извлекает адрес возврата из стека и переходит к выполнению команды по этому адресу. 
При вызове подпрограммы или возникновении прерывания, в стек заносится адрес возврата — адрес в памяти следующей инструкции приостановленной программы и управление передается подпрограмме или подпрограмме-обработчику
При возврате из подпрограммы или обработчика прерывания, адрес возврата снимается со стека и управление передается на следующую инструкцию приостановленной (под-)программы.

Как функция узнает, куда помещены аргументы (в x86_64)? +
В x86_64 аргументы функции передаются через регистры и стек.
Первые шесть аргументов передаются через регистры:
rdi - первый аргумент
rsi - второй аргумент
rdx - третий аргумент
rcx - четвертый аргумент
r8 - пятый аргумент
r9 - шестой аргумент
Остальные аргументы передаются через стек.
Функция может получить доступ к аргументам через соответствующие регистры или извлечь их из стека.
Функция в x86-64 узнаёт, куда помещены аргументы, через соглашение о вызовах. В нём указывается, как передаются аргументы (в регистрах или на стеке), какие именно регистры используются и где хранится результат. 
Например, в 64-amd System V ABI аргументы передаются последовательно в регистрах: %rdi, %rsi, %rdx, %rcx, %r8 и %r9. Если передаётся более 6 аргументов, то оставшиеся — через стек. 
Также при запуске программы регистр rsp указывает на вершину стека, где хранится число аргументов, переданных программе, указатели на эти аргументы, а также переменные окружения и другая информация.

Как процессор реализует "флаги"?  +
Флаги - это биты в регистре флагов (EFLAGS/RFLAGS), которые отражают результаты выполнения команд.
При выполнении команды процессор устанавливает или сбрасывает флаги в зависимости от результата.
Например:
CF (Carry Flag) устанавливается, если результат операции не умещается в регистре.
ZF (Zero Flag) устанавливается, если результат операции равен нулю.
SF (Sign Flag) устанавливается, если результат операции отрицательный.
Флаги используются для принятия решений в условных переходах.
Процессор реализует флаги через специальные регистры — хранилища данных, которые могут принимать различные значения. 
Каждый флаг в регистре флагов содержит один бит информации о результате выполнения операции.  Например:
Флаг переноса (CF) устанавливается, если произошёл перенос в старший разряд при выполнении операции сложения, вычитания или сдвига. 
Флаг нуля (ZF) устанавливается, если результат операции равен нулю. 
Флаг переполнения (OF) устанавливается, если результат операции не может быть представлен в заданном диапазоне (например, при сложении двух положительных чисел получается отрицательное число). 
Флаг знака (SF) устанавливается, если результат операции отрицательный. 
Аппаратные флаги в процессоре обрабатываются автоматически, в зависимости от используемых команд

Что такое jle и jne? +
jle (Jump if Less or Equal) - команда условного перехода, которая выполняет переход, если значение флага SF не равно значению флага OF или значение флага ZF установлено.
jne (Jump if Not Equal) - команда условного перехода, которая выполняет переход, если значение флага ZF сброшено.

Какая команда отвечает за безусловный переход? +
jmp - команда безусловного перехода, которая всегда выполняет переход на указанный адрес.

Как jle узнает о результах сравнения? +
jle использует флаги, установленные предыдущей командой сравнения (например, cmp).
Команда сравнения устанавливает флаги в зависимости от результата сравнения.
jle проверяет значения флагов SF, OF и ZF и выполняет переход, если условие выполнено.